#!/bin/bash
PATH="$PWD/node_modules/.bin":$PATH
set -e

build() {
  set -x
  rm -rf dist
  mkdir dist
  # https://esbuild.github.io/api/#target
  cp -fv src/bin.js dist
  cp -fv README.md LICENSE dist
  yarn pkgroll --target=es2020 --export-condition=node
  cat package.json | jq '.main = "./index.cjs"' |
    jq '.types = "./index.d.ts"' |
    jq '.exports.".".require = "./index.cjs"' |
    jq '.exports.".".types = "./index.d.ts"' |
    jq '.typesVersions."*".generate = ["./generate.d.ts"]' |
    jq '.exports."./generate".require = "./generate.cjs"' |
    jq '.exports."./generate".types = "./generate.d.ts"' \
      >dist/package.json
  set +x
}

compatibilty_check() {
  set -x
  rm -rf ./@generated && yarn prisma:g && yarn tscheck

  echo === Check noAtomicOperations ===
  sed -i 's/noAtomicOperations *= false/noAtomicOperations = true/g' prisma/schema.prisma
  rm -rf ./@generated && yarn prisma:g && yarn tscheck
  sed -i 's/noAtomicOperations *= true/noAtomicOperations = false/g' prisma/schema.prisma

  echo === Check combineScalarFilters ===
  sed -i 's/combineScalarFilters *= false/combineScalarFilters = true/g' prisma/schema.prisma
  rm -rf ./@generated && yarn prisma:g && yarn tscheck
  sed -i 's/combineScalarFilters *= true/combineScalarFilters = false/g' prisma/schema.prisma

  echo === Switching reExport ===
  sed -i 's/reExport *= None/reExport = All/g' prisma/schema.prisma
  rm -rf ./@generated && yarn prisma:g && yarn tscheck
  sed -i 's/reExport *= All/reExport = None/g' prisma/schema.prisma

  echo === Check emitSingle ===
  sed -i 's/emitSingle *= false/emitSingle = true/g' prisma/schema.prisma
  rm -rf ./@generated && yarn prisma:g
  yarn tsc --noEmit --skipLibCheck --experimentalDecorators ./@generated/index.ts
  yarn ts-node ./@generated/index.ts

  echo === Check emitCompiled ===
  sed -i 's/emitCompiled *= false/emitCompiled = true/g' prisma/schema.prisma
  rm -rf ./@generated && yarn prisma:g
  node ./@generated/index.js

  sed -i 's/emitCompiled *= true/emitCompiled = false/g' prisma/schema.prisma
  sed -i 's/emitSingle *= true/emitSingle = false/g' prisma/schema.prisma

  echo === Check requireSingleFieldsInWhereUniqueInput ===
  sed -i 's/requireSingleFieldsInWhereUniqueInput *= false/requireSingleFieldsInWhereUniqueInput = true/g' prisma/schema.prisma
  rm -rf ./@generated && yarn prisma:g && yarn tscheck
  sed -i 's/requireSingleFieldsInWhereUniqueInput *= true/requireSingleFieldsInWhereUniqueInput = false/g' prisma/schema.prisma

  set +x
}

commit_lint() {
  if git-branch-is -q -r "^(master)"; then
    commitlint --edit
  else
    true
  fi
}

"$@"
